---
title: 100%
hidden: false
---

This page is dedicated to glitches and mechanics related to the character name and the name input field in the character creation menu. 

## Variable Tags

The name input field allows many different variable tags to be used within a character's name. These tags are replaced with whatever the associated value currently in memory is. For example, the `<?souls?>` tag will always show the current amount of Souls, or, if the tag is viewed in the main menu/character creation/character load screen, however many Souls the character had that was last played.

Some tags such as `sysmsg` expect a parameter, usually an id. The parameter is written after an @ sign. For example `<?sysmsg@1?>` results in `OK`. Adding an @ sign to the end of any tag regardless of it expecting a parameter or not doesn't change how it is displayed.

The expandable lists below show all possible tags:
{% table %}
- Variable tags that fit 13 character name limit
---
- - OKBtn
  - NGBtn
  - WepName
  - bmsg
  - pcName
  - pcGender
  - pcOath
  - pcWill
  - pcEndur
  - pcDexter
  - pcForce
  - pcLuck
  - pcHeroic
  - pcLevel
  - pcGift
  - pcFeature
  - pcHP
  - pcMP
  - pcStamina
  - pcMaxHp
  - pcMaxMp
  - atckR1
  - atckR2
  - atckL1
  - atckL2
  - defFirePC
  - souls
  - lvUpAtkR1
  - lvUpAtkR2
  - lvUpAtkL1
  - lvUpAtkL2
  - itemName
  - itemNum
  - buySouls
  - sellSouls
  - duration
  - weight
  - wpAtkType
  - wpType
  - wpCutFire
  - wpHitRes
  - wpFireAtk
  - reqGender
  - defBlunt
  - defCut
  - defStab
  - defMagic
  - defFire
  - reqSlot
  - costMP
  - mapName
  - warpName1
  - warpName2
  - warpName3
  - warpName4
  - warpName5
  - warpName6
  - warpName7
  - warpName8
  - warpName9
  - key1
  - key2
  - key3
  - key4
  - key5
  - key6
  - key7
  - key8
  - key9
  - key10
  - hostName
  - joinName
  - leaveName
  - deadName
  - enemyPC1
  - enemyPC2
  - enemyPC3
  - remainSec
  - rank1
  - rank2
  - rank3
  - rank4
  - rank5
  - rank6
  - rank7
  - rank8
  - rank9
  - rank10
  - ptTime
  - ptMinute
  - ptSecond
  - dataSize
  - menuTitle
  - originId
  - npcNameId
  - mapNameId
  - lineHelp
  - keyGuide
  - selectU
  - selectD
  - selectL
  - selectR
  - selectUD
  - selectLR
  - selectAll
  - pageUD
  - pageUp
  - pageDown
  - cancel
  - commando
  - shortCutL
  - shortCutR
  - spin
  - spinReset
  - moneReset
  - run
  - dush
  - step
  - select
  - attackL
  - attackR
  - prepBow
  - attachBow
  - conceBow
  - zoomIn
  - zoomOut
  - startItem
  - gdsparam
  - wepparam
  - mgcparam
  - prtparam
  - acsparam
  - areaName
  - blockName
  - archetype
  - npcName
  - placeName
  - sysmsg
  - platmsg
  - optHUD
  - optBGMVol
  - optSEVol
  - em2
  - npl
  - nam
  - job
  - etc
  - trp
  - dir
  - som
  - cls
  - rat
  - got
  - fel
  - hlp
  - low
  - upr
{% /table %}

{% table %}
- All other variable tags
---
- - pcVitality
  - pcStrength
  - pcDurability
  - pcIntellect
  - pcAppearance
  - pcFaceType
  - pcHairType
  - pcHairEyeColor
  - pcMaxStamina
  - pcItemOccur
  - equipWeight
  - maxEquipWeight
  - defPhysicalTotal
  - defPhysicalPC
  - defBluntTotal
  - defCutTotal
  - defStabTotal
  - defMagicTotal
  - defMagicPC
  - defFireTotal
  - defThunderboltTotal
  - defThunderboltPC
  - defSAToughnessTotal
  - resistBleedingTotal
  - resistPoisonTotal
  - resistPlagueTotal
  - resistCurseTotal
  - magicSlotNum
  - miracleSlotNum
  - lvUpAfterSouls
  - lvUpCostSouls
  - lvUpPcVitality
  - lvUpPcWill
  - lvUpPcEndur
  - lvUpPcStrength
  - lvUpPcDexter
  - lvUpPcDurability
  - lvUpPcIntellect
  - lvUpPcForce
  - lvUpPcLuck
  - lvUpPcHeroic
  - lvUpPcLevel
  - lvUpPcMaxHp
  - lvUpPcMaxMp
  - lvUpPcMaxStamina
  - lvUpPcItemOccur
  - lvUpMaxEquipWeight
  - lvUpDefPhysicalTotal
  - lvUpDefPhysicalPC
  - lvUpDefBlunt
  - lvUpDefCut
  - lvUpDefStab
  - lvUpDefMagicTotal
  - lvUpDefMagicPC
  - lvUpDefFireTotal
  - lvUpDefFirePC
  - lvUpDefThunderboltTotal
  - lvUpDefThunderboltPC
  - lvUpResistBleedingTotal
  - lvUpResistPoisonTotal
  - lvUpResistPlagueTotal
  - lvUpResistCurseTotal
  - lvUpDefSAToughnessTotal
  - lvUpMagicSlotNum
  - lvUpMiracleSlotNum
  - lvUpWpPhysicalAtkPlus
  - lvUpWpAttributeAtkPlus
  - lvUpWpCriticalAtkPlus
  - lvUpWpMagicAtkPlus
  - lvUpWpFireAtkPlus
  - lvUpWpThunderboltAtkPlus
  - lvUpWpMagicAdjust
  - lvUpWpMiracleAdjust
  - itemListName1
  - itemListName2
  - itemListName3
  - itemListName4
  - itemListName5
  - itemListNum1
  - itemListNum2
  - itemListNum3
  - itemListNum4
  - itemListNum5
  - itemListLineMsg1
  - itemListLineMsg2
  - itemListLineMsg3
  - itemListLineMsg4
  - itemListLineMsg5
  - itemLineMsg
  - itemDetail
  - maxDuration
  - itemNameBeforeForge
  - itemNameAfterForge
  - wpPhysicalAtk
  - wpAttributeAtk
  - wpCriticalAtk
  - wpPhysicalAtkPlus
  - wpAttributeAtkPlus
  - wpCriticalAtkPlus
  - wpShotRange
  - wpMagicAdjust
  - wpMiracleAdjust
  - wpCutPhysical
  - wpCutMagic
  - wpCutThunderbolt
  - atkPlusPcStrength
  - atkPlusPcDexter
  - atkPlusPcIntellect
  - atkPlusPcForce
  - reqPcStrength
  - reqPcDexter
  - reqPcIntellect
  - reqPcForce
  - effectBleeding
  - effectPoison
  - effectPlague
  - effectCurse
  - wpMagicAtk
  - wpThunderboltAtk
  - wpMagicAtkPlus
  - wpFireAtkPlus
  - wpThunderboltAtkPlus
  - WpCriticalAtkPlus
  - forgedWpPhysicalAtk
  - forgedWpAttributeAtk
  - forgedWpCriticalAtk
  - forgedWpPhysicalAtkPlus
  - forgedWpAttributeAtkPlus
  - forgedWpCriticalAtkPlus
  - forgedWpShotRange
  - forgedWpMagicAdjust
  - forgedWpCutPhysical
  - forgedWpCutMagic
  - forgedWpCutFire
  - forgedWpCutThunderbolt
  - forgedWpHitRes
  - forgedAtkPlusPcStrength
  - forgedAtkPlusPcDexter
  - forgedAtkPlusPcIntellect
  - forgedAtkPlusPcForce
  - forgedReqPcStrength
  - forgedReqPcDexter
  - forgedReqPcIntellect
  - forgedReqPcForce
  - forgedEffectBleeding
  - forgedEffectPoison
  - forgedEffectPlague
  - forgedEffectCurse
  - defPhysical
  - defThunderbolt
  - resistBleeding
  - resistPoison
  - resistPlague
  - resistCurse
  - forgedDefPhysical
  - forgedDefBlunt
  - forgedDefCut
  - forgedDefStab
  - forgedDefMagic
  - forgedDefFire
  - forgedDefThunderbolt
  - forgedResistBleeding
  - forgedResistPoison
  - forgedResistPlague
  - forgedResistCurse
  - equipMagicInfo1
  - equipMagicInfo2
  - equipMagicInfo3
  - equipMagicInfo4
  - equipMagicInfo5
  - equipMagicInfo6
  - equipMagicInfo7
  - equipMagicInfo8
  - equipMagicInfo9
  - equipMagicInfo10
  - equipMagicInfo11
  - equipMagicInfo12
  - magicCount1
  - magicCount2
  - magicCount3
  - magicCount4
  - magicCount5
  - magicCount6
  - magicCount7
  - magicCount8
  - magicCount9
  - magicCount10
  - magicCount11
  - magicCount12
  - magicMaxCount1
  - magicMaxCount2
  - magicMaxCount3
  - magicMaxCount4
  - magicMaxCount5
  - magicMaxCount6
  - magicMaxCount7
  - magicMaxCount8
  - magicMaxCount9
  - magicMaxCount10
  - magicMaxCount11
  - magicMaxCount12
  - equipmentPart
  - equipItemName
  - ringEffect
  - equipItemNum1
  - equipItemNum2
  - equipItemNum3
  - equipItemNum4
  - equipItemNum5
  - equipArrowNum1
  - equipArrowNum2
  - equipBoltNum1
  - equipBoltNum2
  - removeMagic
  - getItemName1
  - getItemName2
  - getItemName3
  - getItemName4
  - getItemName5
  - getItemNum1
  - getItemNum2
  - getItemNum3
  - getItemNum4
  - getItemNum5
  - warpName10
  - warpName11
  - warpName12
  - warpName13
  - pcenvInitValue01
  - pcenvValue01
  - pcenvValue02
  - pcenvValue03
  - pcenvValue04
  - pcenvValue05
  - pcenvTimer1
  - keyCategory
  - keyAction1
  - keyAction2
  - keyAction3
  - keyAction4
  - keyAction5
  - keyAction6
  - keyAction7
  - keyAction8
  - keyAction9
  - keyAction10
  - registerItemNum
  - coliseumDeadNameA
  - coliseumDeadNameB
  - coliseumDeadNameC
  - coliseumDeadNameD
  - rankPlayerName1
  - rankPlayerName2
  - rankPlayerName3
  - rankPlayerName4
  - rankPlayerName5
  - rankPlayerName6
  - rankPlayerName7
  - rankPlayerName8
  - rankPlayerName9
  - rankPlayerName10
  - rankScore1
  - rankScore2
  - rankScore3
  - rankScore4
  - rankScore5
  - rankScore6
  - rankScore7
  - rankScore8
  - rankScore9
  - rankScore10
  - rankCategory
  - pcPlayTime
  - pmOptionsText
  - pmOptions1
  - pmOptions2
  - pmOptions3
  - pmOptions4
  - pmOptions5
  - pmOptions6
  - pmOptions7
  - pmOptions8
  - pmOptions9
  - pmOptions10
  - pmOptions11
  - pmOptions12
  - pmOptions13
  - pmOptions14
  - pmOptions15
  - pmOptions16
  - pmOptions17
  - pmOptions18
  - pmOptions19
  - pmOptions20
  - goodsNameId
  - weaponNameId
  - magicNameId
  - protectorNameId
  - ringNameId
  - systemMsgId
  - platformMsgId
  - loadHintName
  - loadHintCaption
  - conclusion
  - viewChange
  - shortCutLR
  - categoryChangeLR
  - categoryChangeL
  - categoryChangeR
  - startMenuSwitch
  - slectMenuSwitch
  - actionHelp
  - attackBoth
  - defenceBoth
  - changeEquStyle
  - changeArmL
  - changeArmR
  - startMagic
  - changeMagic
  - startAction
  - releaseConceBow
  - chamgeItem
  - demandSoul
  - selectGesture
  - inventoryNum0
  - inventoryNum1
  - inventoryNum2
  - inventoryNum3
  - repositoryNum0
  - repositoryNum1
  - repositoryNum2
  - repositoryNum3
  - optCameraLR
  - optCameraUD
  - optCameraSpeed
  - optVibration
  - optLockOnAuto
  - optCamAvoidWall
  - optShowBlood
  - optSubtitles
  - optVoiceVol
  - optRegisterRanking
  - optBrightness
  - evntAcquittalPrice
{% /table %}

## Formatting Tags

There are various tags reserved for string formatting that can be used in the character name. All of these start with a `#` sign. In order to type one of the following tags into the name input field, the `#` and the corresponding tag letter need to be typed while the underscore (`_`) that flashes while entering a name is invisible. If the current character name ends in a single `#` when the `_` is visible, the game will crash. This is because the game tries to interpret the `#_` as a tag which does not exist. The flashing is caused by the game alternating between `_` and `#a[00]_#a` (an invisible underscore). When the latter is present (and no underscore is visible), the `#` character will not crash, because `##` is valid. This toggle happens every X frames, so you need to type somewhat quickly. '''Note:''' The 13 character limit still applies to escaped characters, so your name will have to be much shorter if it includes any of these sequences. The code (in debug) which handles `#` escapements is at 0x0058CD20. It calls into separate functions for each of the sequences below: 

# `##`

Escapement for the literal `#` character. Consumes both characters and returns (continues processing normally). 

# `#a` (Alpha)

Parses a color code out of the remainder of the string. See [[#Color_Parsing|color parsing]] for more technical details. Note that only the low byte (the "blue" component) is used to determine the alpha (transparency) of the text.
This operates similar to HTML; `0xFF` represents full opacity and `0x00` represents full transparency. If the tag is unterminated, this will alternate every other frame, since the text parser maintains an internal state<sup>explain?</sup> which is not cleared. 

# `#b` (Bold)

Marks the text as bold, until another `#b` is found. If the tag is unterminated, this will alternate every other frame, since the text parser maintains an internal state<sup>explain?</sup> which is not cleared.

# `#c` (Color)

Parses a color code out of the remainder of the string. See [[#Color_Parsing|color parsing]] for more technical details. This operates similar to HTML; e.g. `0x7F00FFFF` represents a 50% opacity bright teal. If the tag is unterminated, this will alternate every other frame, since the text parser maintains an internal state<sup>explain?</sup> which is not cleared.

# `#f` (Font)

Parses a color code out of the remainder of the string. See [[#Color_Parsing|color parsing]] for more technical details. This code is used to determine the font ID. There are only 3 fonts in the game, and any value greater than `0x0000002` will result in the text not being rendered. Since the color parser prefixes an alpha value for codes less than 6 digits, you must supply a 7 or 8 digit code to have a visible font. {| class="wikitable mw-collapsible mw-collapsed" ! Available fonts |- | style="text-align: left;" | {| | [[File:Font_0.png|Monospaced font]] |- | Monospaced font (0) |} {| | [[File:Font_1.png|Default font]] |- | Default font (1) |} {| | [[File:Font_2.png|Unused font]] |- | Unused font (2) |} {| | [[File:Font_3.png|Invisible font]] |- | Invisible font (3+) |} |}

# `#i` (Italics)

Marks the text as italics, until another `#i` is found. If the tag is unterminated, this will alternate every other frame, since the text parser maintains an internal state<sup>explain?</sup> which is not cleared.

# `#m` 

Calls into 0x58BBB0 

# `#r`

Calls into 0x58C7A0 

# Any other character

Default case, which triggers a crash. This calls 0x55A3F0 (likely a [[wikipedia:Kernel_panic|panic function]]) as such:
`func_55A3F0("invalid char code", 1330, "..\..\Source\Font\DLTaggedTextProcessor.cpp")`
Presumably the next two arguments are the line and file name of this error. 

## Color Parsing

For tags which require a color code, the name parser will look for a code within brackets (`[]`).
- First, it checks that the immediate next character is an open bracket. If not, the function returns 0, which resets the color code. 
- If there are no further characters after the opening bracket, the parser returns a default value of 0xFF000000 (ARGB, opaque black). 
- If an opening bracket is found, the parser will consume characters until a closing bracket is found. Due to a bug, if there is no closing bracket, the parser will keep reading until it finds one, usually resulting in a crash. 
- Each character that is read is mapped to a value by taking the hex value of the character (e.g. 'a' == 0x61), adding `0x10DA2E4`<sup>(steam version)</sup> or `0x10DF2D4`<sup>(debug version)</sup>, and then reading the value at that location. 
- All of these values are in the read-only data segment from `0x10CC000 - 0x12A9FFF`<sup>(steam version)</sup>. Theoretically, a codepoint from a [[wikipedia:Plane_(Unicode)#Supplementary_Multilingual_Plane|supplementary plane]] could read outside this region, but these values are too large (`0xDF00DC00` is the smallest such value) and result in an access violation. 
- The contents of this table depend on the version you play on. For example, the character È (alt+0200) maps to 0xF8 on the latest steam version, but maps to 0x50 on the debug version.
- The main hexadecimal characters (`0-9`, `a-f`, and `A-F`) all map to their associated hexadecimal counterparts. 
- Although each character maps to an entire byte, the parser only expects a half-byte (nibble). Thus, the first character in the input can be used to set two bytes (if it's a non-ascii character).
- At the end of parsing, if there are 6 or fewer characters, the alpha is automatically set to 0xFF (fully opaque).

Each character represents a "nibble" (half of a byte). This means that 8 characters are required to fully express a color code. Note that characters are filled right-to-left, so `CC` maps to `FF0000CC` (blue), and `CC00` maps to `FF00CC00` (green). To input a color code (or an alpha code) without triggering a crash, follow these steps:
- While the cursor is invisible, input `#c` 
- While `[00]` is visible, input `[]`
- While `[00]` is visible, input `BACKSPACE` `A]` (where `A` is the next character in your desired color code). Like all the other codes, color will flash on every frame if the tag is not closed. You still need to be careful when closing the code, and only input `#c` when the underscore is invisible.